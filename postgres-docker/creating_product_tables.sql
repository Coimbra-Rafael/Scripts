
--------------------------------------------------
-- 01. Categoria de Produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_product_categories (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    category_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    category_name VARCHAR(120) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, enterprise_id, category_id),
    CONSTRAINT fk_tb_product_categories_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id),
    CONSTRAINT uq_tb_product_categories_name
        UNIQUE (customer_id, enterprise_id, category_name)
);

--------------------------------------------------
-- 02. Produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_products (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    product_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR(255) NOT NULL,
    cost_price NUMERIC(10,4) NOT NULL,
    category_id INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, enterprise_id, product_id),
    CONSTRAINT fk_tb_products_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id),
    CONSTRAINT fk_tb_products_category
        FOREIGN KEY (customer_id, enterprise_id, category_id)
            REFERENCES tb_product_categories(customer_id, enterprise_id, category_id)
);

--------------------------------------------------
-- 03. Tabela preços
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_price_table (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    price_table_id SMALLINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    price_table_name varchar(50) NOT NULL,
    PRIMARY KEY (customer_id, enterprise_id, price_table_id),
    CONSTRAINT fk_enterprise_price_table
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id),
      CONSTRAINT uq_tb_price_table_name
        UNIQUE (customer_id, enterprise_id, price_table_name)
);

--------------------------------------------------
-- 04. Códigos dos Produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_product_codes (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    product_id BIGINT NOT NULL,
    code_id SMALLINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    code_product VARCHAR(60) NOT NULL,
    price_table_id SMALLINT NOT NULL,
    main_code CHAR(1) NOT NULL,
    PRIMARY KEY (customer_id, enterprise_id, product_id, code_id),
    CONSTRAINT fk_tb_product_codes_products
        FOREIGN KEY (customer_id, enterprise_id, product_id)
            REFERENCES tb_products(customer_id, enterprise_id, product_id),
    CONSTRAINT fk_tb_price_table
        FOREIGN KEY (customer_id, enterprise_id, price_table_id)
            REFERENCES tb_price_table(customer_id, enterprise_id, price_table_id),
     CONSTRAINT uq_tb_product_codes
        UNIQUE (customer_id, enterprise_id, code_product)
);

--------------------------------------------------
-- 05. Table de preço dos produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_product_price_table (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    product_id BIGINT NOT NULL,
    price_table_id SMALLINT NOT NULL,
    price_table_product_id SMALLINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    margin_of_price NUMERIC NOT NULL,
    selling_price NUMERIC NOT NULL,
    PRIMARY KEY (customer_id,enterprise_id, price_table_product_id),
    CONSTRAINT fk_tb_product
        FOREIGN KEY (customer_id, enterprise_id, product_id)
            REFERENCES tb_products(customer_id, enterprise_id, product_id),
    CONSTRAINT fk_price_table
        FOREIGN KEY (customer_id, enterprise_id, price_table_id)
            REFERENCES tb_price_table(customer_id, enterprise_id, price_table_id)
);

