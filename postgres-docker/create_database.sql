-- CREATE DATABASE enterprise_resource_planning;

--------------------------------------------------
-- 0. Função para atualização do campo updated_at
--------------------------------------------------
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------
-- 1. Tabela de Planos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_plans (
    plan_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    plan_name VARCHAR(50) NOT NULL
);

--------------------------------------------------
-- 2. Tabela de Clientes
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_customers (
    customer_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    customer_name VARCHAR(200) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--------------------------------------------------
-- 3. Configurações dos Clientes
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_customers_config (
    customer_config_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    CONSTRAINT fk_tb_customers_config_customer
         FOREIGN KEY (customer_id)
             REFERENCES tb_customers(customer_id)
);

--------------------------------------------------
-- 4. Relacionamento entre Clientes e Planos (N:N)
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_customers_plans (
    customer_id BIGINT NOT NULL,
    plan_id INT NOT NULL,
    PRIMARY KEY (customer_id, plan_id),
    CONSTRAINT fk_tb_customers_plans_customer
        FOREIGN KEY (customer_id)
            REFERENCES tb_customers(customer_id),
    CONSTRAINT fk_tb_customers_plans_plan
        FOREIGN KEY (plan_id)
            REFERENCES tb_plans(plan_id)
);

--------------------------------------------------
-- 5. Endereços dos Clientes
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_customers_address (
    address_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    street_name VARCHAR(255) NOT NULL,
    street_number INTEGER NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_tb_customers_address_customer
        FOREIGN KEY (customer_id)
            REFERENCES tb_customers(customer_id)
            ON DELETE CASCADE
);

--------------------------------------------------
-- 6. Tabela de Empresas
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_enterprise (
    enterprise_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    customer_id BIGINT NOT NULL,
    reason_social VARCHAR(255) NOT NULL,
    fantasy_name VARCHAR(255) NOT NULL,
    cpf_cnpj VARCHAR(14) NOT NULL,
    state_registration VARCHAR(9) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, enterprise_id),
    CONSTRAINT fk_tb_enterprise_customer
        FOREIGN KEY (customer_id)
            REFERENCES tb_customers(customer_id)
);

--------------------------------------------------
-- 7. Endereços das Empresas
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_enterprise_address (
    address_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    street_name VARCHAR(255) NOT NULL,
    street_number INTEGER NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_tb_enterprise_address_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id)
            ON DELETE CASCADE
);

--------------------------------------------------
-- 8. Configurações das Empresas
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_enterprise_config (
    enterprise_config_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    certificate_name VARCHAR(255) NULL,
    certificate_content TEXT NULL,
    expiration_date DATE NULL,
    CONSTRAINT fk_tb_enterprise_config_enterprise
         FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id)
);

--------------------------------------------------
-- 9. Usuários (Clientes)
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    customer_id BIGINT NOT NULL,
    username VARCHAR(150) UNIQUE NOT NULL,
    password VARCHAR(150) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, user_id),
    CONSTRAINT fk_tb_users_customer
        FOREIGN KEY (customer_id)
            REFERENCES tb_customers(customer_id)
);

--------------------------------------------------
-- 10. Relacionamento entre Usuários e Empresas
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_users_enterprise (
    customer_id BIGINT NOT NULL,
    user_id INT NOT NULL,
    enterprise_id INT NOT NULL,
    PRIMARY KEY (customer_id, user_id, enterprise_id),
    CONSTRAINT fk_tb_users_enterprise_user
        FOREIGN KEY (customer_id, user_id)
            REFERENCES tb_users(customer_id, user_id),
    CONSTRAINT fk_tb_users_enterprise_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id)
);

--------------------------------------------------
-- 11. Permissões
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_roles (
    role_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL
);

--------------------------------------------------
-- 12. Relacionamento entre Usuários e Permissões
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_users_roles (
    customer_id BIGINT NOT NULL,
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    PRIMARY KEY (customer_id, user_id, role_id),
    CONSTRAINT fk_tb_users_roles_user
        FOREIGN KEY (customer_id, user_id)
            REFERENCES tb_users(customer_id, user_id),
    CONSTRAINT fk_tb_users_roles_role
        FOREIGN KEY (role_id)
            REFERENCES tb_roles(role_id)
);

--------------------------------------------------
-- 13. Categoria de Produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_product_categories (
    category_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    category_name VARCHAR(120) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, enterprise_id, category_id),
    CONSTRAINT fk_tb_product_categories_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id),
    CONSTRAINT uq_tb_product_categories_name
        UNIQUE (customer_id, enterprise_id, category_name)
);

--------------------------------------------------
-- 14. Produtos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_products (
    product_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    cost_price NUMERIC(10,4) NOT NULL,
    category_id INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id, enterprise_id, product_id),
    CONSTRAINT fk_tb_products_category
        FOREIGN KEY (customer_id, enterprise_id, category_id)
            REFERENCES tb_product_categories(customer_id, enterprise_id, category_id),
    CONSTRAINT fk_tb_products_enterprise
        FOREIGN KEY (customer_id, enterprise_id)
            REFERENCES tb_enterprise(customer_id, enterprise_id)
);

--------------------------------------------------
-- 15. Produtos codigos
--------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_product_codes (
    customer_id BIGINT NOT NULL,
    enterprise_id INT NOT NULL,
    product_id BIGINT NOT NULL,
    code_id BIGINT NOT NULL,
    PRIMARY KEY (customer_id, enterprise_id, product_id, code_id),
    CONSTRAINT fk_tb_products
        FOREIGN KEY (customer_id, enterprise_id, product_id)
            REFERENCES tb_products(customer_id, enterprise_id, product_id)
);

--------------------------------------------------
-- 0.01 Bloco dinâmico para criação de triggers em todas as tabelas com a coluna updated_at
--------------------------------------------------
DO $$
DECLARE
    rec RECORD;
    trigger_name TEXT;
BEGIN
    FOR rec IN
        SELECT table_schema, table_name
        FROM information_schema.columns
        WHERE column_name = 'updated_at'
          AND table_schema = 'public'
    LOOP
        trigger_name := 'trg_' || rec.table_name || '_auto_updated_at';
        -- Verifica se o trigger já existe para evitar duplicidade
        IF NOT EXISTS (
            SELECT 1 FROM pg_trigger
            WHERE tgname = trigger_name
        ) THEN
            EXECUTE format('
                CREATE TRIGGER %I
                BEFORE UPDATE ON %I.%I
                FOR EACH ROW
                EXECUTE FUNCTION update_updated_at_column();',
                trigger_name, rec.table_schema, rec.table_name);
        END IF;
    END LOOP;
END
$$;
